/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Authorization2;
import com.konfigthis.client.model.Capture2;
import com.konfigthis.client.model.CaptureRequest;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PaymentInstruction;
import com.konfigthis.client.model.ReauthorizeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthorizationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call capturePaymentCall(String authorizationId, String payPalRequestId, String prefer, CaptureRequest captureRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = captureRequest;

        // create path and map variables
        String localVarPath = "/v2/payments/authorizations/{authorization_id}/capture"
            .replace("{" + "authorization_id" + "}", localVarApiClient.escapeString(authorizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalRequestId != null) {
            localVarHeaderParams.put("PayPal-Request-Id", localVarApiClient.parameterToString(payPalRequestId));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call capturePaymentValidateBeforeCall(String authorizationId, String payPalRequestId, String prefer, CaptureRequest captureRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationId' is set
        if (authorizationId == null) {
            throw new ApiException("Missing the required parameter 'authorizationId' when calling capturePayment(Async)");
        }

        return capturePaymentCall(authorizationId, payPalRequestId, prefer, captureRequest, _callback);

    }


    private ApiResponse<Capture2> capturePaymentWithHttpInfo(String authorizationId, String payPalRequestId, String prefer, CaptureRequest captureRequest) throws ApiException {
        okhttp3.Call localVarCall = capturePaymentValidateBeforeCall(authorizationId, payPalRequestId, prefer, captureRequest, null);
        Type localVarReturnType = new TypeToken<Capture2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call capturePaymentAsync(String authorizationId, String payPalRequestId, String prefer, CaptureRequest captureRequest, final ApiCallback<Capture2> _callback) throws ApiException {

        okhttp3.Call localVarCall = capturePaymentValidateBeforeCall(authorizationId, payPalRequestId, prefer, captureRequest, _callback);
        Type localVarReturnType = new TypeToken<Capture2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CapturePaymentRequestBuilder {
        private final String authorizationId;
        private String invoiceId;
        private String noteToPayer;
        private Money amount;
        private Boolean finalCapture;
        private PaymentInstruction paymentInstruction;
        private String softDescriptor;
        private String payPalRequestId;
        private String prefer;

        private CapturePaymentRequestBuilder(String authorizationId) {
            this.authorizationId = authorizationId;
        }

        /**
         * Set invoiceId
         * @param invoiceId The API caller-provided external invoice number for this order. Appears in both the payer&#39;s transaction history and the emails that the payer receives. (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder invoiceId(String invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }
        
        /**
         * Set noteToPayer
         * @param noteToPayer An informational note about this settlement. Appears in both the payer&#39;s transaction history and the emails that the payer receives. (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder noteToPayer(String noteToPayer) {
            this.noteToPayer = noteToPayer;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder amount(Money amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set finalCapture
         * @param finalCapture Indicates whether you can make additional captures against the authorized payment. Set to &#x60;true&#x60; if you do not intend to capture additional payments against the authorization. Set to &#x60;false&#x60; if you intend to capture additional payments against the authorization. (optional, default to false)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder finalCapture(Boolean finalCapture) {
            this.finalCapture = finalCapture;
            return this;
        }
        
        /**
         * Set paymentInstruction
         * @param paymentInstruction  (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder paymentInstruction(PaymentInstruction paymentInstruction) {
            this.paymentInstruction = paymentInstruction;
            return this;
        }
        
        /**
         * Set softDescriptor
         * @param softDescriptor The payment descriptor on the payer&#39;s account statement. (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder softDescriptor(String softDescriptor) {
            this.softDescriptor = softDescriptor;
            return this;
        }
        
        /**
         * Set payPalRequestId
         * @param payPalRequestId The server stores keys for 45 days. (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder payPalRequestId(String payPalRequestId) {
            this.payPalRequestId = payPalRequestId;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Build call for capturePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            return capturePaymentCall(authorizationId, payPalRequestId, prefer, captureRequest, _callback);
        }

        private CaptureRequest buildBodyParams() {
            CaptureRequest captureRequest = new CaptureRequest();
            captureRequest.amount(this.amount);
            captureRequest.invoiceId(this.invoiceId);
            captureRequest.finalCapture(this.finalCapture);
            captureRequest.noteToPayer(this.noteToPayer);
            captureRequest.softDescriptor(this.softDescriptor);
            return captureRequest;
        }

        /**
         * Execute capturePayment request
         * @return Capture2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Capture2 execute() throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            ApiResponse<Capture2> localVarResp = capturePaymentWithHttpInfo(authorizationId, payPalRequestId, prefer, captureRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute capturePayment request with HTTP info returned
         * @return ApiResponse&lt;Capture2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Capture2> executeWithHttpInfo() throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            return capturePaymentWithHttpInfo(authorizationId, payPalRequestId, prefer, captureRequest);
        }

        /**
         * Execute capturePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Capture2> _callback) throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            return capturePaymentAsync(authorizationId, payPalRequestId, prefer, captureRequest, _callback);
        }
    }

    /**
     * Capture authorized payment
     * Captures an authorized payment, by ID.
     * @param authorizationId The PayPal-generated ID for the authorized payment to void. (required)
     * @return CapturePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public CapturePaymentRequestBuilder capturePayment(String authorizationId) throws IllegalArgumentException {
        if (authorizationId == null) throw new IllegalArgumentException("\"authorizationId\" is required but got null");
            

        return new CapturePaymentRequestBuilder(authorizationId);
    }
    private okhttp3.Call reauthorizePaymentCall(String authorizationId, String payPalRequestId, String prefer, ReauthorizeRequest reauthorizeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reauthorizeRequest;

        // create path and map variables
        String localVarPath = "/v2/payments/authorizations/{authorization_id}/reauthorize"
            .replace("{" + "authorization_id" + "}", localVarApiClient.escapeString(authorizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalRequestId != null) {
            localVarHeaderParams.put("PayPal-Request-Id", localVarApiClient.parameterToString(payPalRequestId));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reauthorizePaymentValidateBeforeCall(String authorizationId, String payPalRequestId, String prefer, ReauthorizeRequest reauthorizeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationId' is set
        if (authorizationId == null) {
            throw new ApiException("Missing the required parameter 'authorizationId' when calling reauthorizePayment(Async)");
        }

        return reauthorizePaymentCall(authorizationId, payPalRequestId, prefer, reauthorizeRequest, _callback);

    }


    private ApiResponse<Authorization2> reauthorizePaymentWithHttpInfo(String authorizationId, String payPalRequestId, String prefer, ReauthorizeRequest reauthorizeRequest) throws ApiException {
        okhttp3.Call localVarCall = reauthorizePaymentValidateBeforeCall(authorizationId, payPalRequestId, prefer, reauthorizeRequest, null);
        Type localVarReturnType = new TypeToken<Authorization2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reauthorizePaymentAsync(String authorizationId, String payPalRequestId, String prefer, ReauthorizeRequest reauthorizeRequest, final ApiCallback<Authorization2> _callback) throws ApiException {

        okhttp3.Call localVarCall = reauthorizePaymentValidateBeforeCall(authorizationId, payPalRequestId, prefer, reauthorizeRequest, _callback);
        Type localVarReturnType = new TypeToken<Authorization2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReauthorizePaymentRequestBuilder {
        private final String authorizationId;
        private Money amount;
        private String payPalRequestId;
        private String prefer;

        private ReauthorizePaymentRequestBuilder(String authorizationId) {
            this.authorizationId = authorizationId;
        }

        /**
         * Set amount
         * @param amount  (optional)
         * @return ReauthorizePaymentRequestBuilder
         */
        public ReauthorizePaymentRequestBuilder amount(Money amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set payPalRequestId
         * @param payPalRequestId The server stores keys for 45 days. (optional)
         * @return ReauthorizePaymentRequestBuilder
         */
        public ReauthorizePaymentRequestBuilder payPalRequestId(String payPalRequestId) {
            this.payPalRequestId = payPalRequestId;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return ReauthorizePaymentRequestBuilder
         */
        public ReauthorizePaymentRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Build call for reauthorizePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows the reauthorized payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReauthorizeRequest reauthorizeRequest = buildBodyParams();
            return reauthorizePaymentCall(authorizationId, payPalRequestId, prefer, reauthorizeRequest, _callback);
        }

        private ReauthorizeRequest buildBodyParams() {
            ReauthorizeRequest reauthorizeRequest = new ReauthorizeRequest();
            reauthorizeRequest.amount(this.amount);
            return reauthorizeRequest;
        }

        /**
         * Execute reauthorizePayment request
         * @return Authorization2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows the reauthorized payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Authorization2 execute() throws ApiException {
            ReauthorizeRequest reauthorizeRequest = buildBodyParams();
            ApiResponse<Authorization2> localVarResp = reauthorizePaymentWithHttpInfo(authorizationId, payPalRequestId, prefer, reauthorizeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reauthorizePayment request with HTTP info returned
         * @return ApiResponse&lt;Authorization2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows the reauthorized payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authorization2> executeWithHttpInfo() throws ApiException {
            ReauthorizeRequest reauthorizeRequest = buildBodyParams();
            return reauthorizePaymentWithHttpInfo(authorizationId, payPalRequestId, prefer, reauthorizeRequest);
        }

        /**
         * Execute reauthorizePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows the reauthorized payment details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authorization2> _callback) throws ApiException {
            ReauthorizeRequest reauthorizeRequest = buildBodyParams();
            return reauthorizePaymentAsync(authorizationId, payPalRequestId, prefer, reauthorizeRequest, _callback);
        }
    }

    /**
     * Reauthorize authorized payment
     * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.&lt;br/&gt;&lt;br/&gt;If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.&lt;br/&gt;&lt;br/&gt;A reauthorized payment itself has a new honor period of three days.&lt;br/&gt;&lt;br/&gt;You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.&lt;br/&gt;&lt;br/&gt;Supports only the &#x60;amount&#x60; request parameter.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; This request is currently not supported for Partner use cases.&lt;/blockquote&gt;
     * @param authorizationId The PayPal-generated ID for the authorized payment to void. (required)
     * @return ReauthorizePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request returns the HTTP &lt;code&gt;201 Created&lt;/code&gt; status code and a JSON response body that shows the reauthorized payment details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ReauthorizePaymentRequestBuilder reauthorizePayment(String authorizationId) throws IllegalArgumentException {
        if (authorizationId == null) throw new IllegalArgumentException("\"authorizationId\" is required but got null");
            

        return new ReauthorizePaymentRequestBuilder(authorizationId);
    }
    private okhttp3.Call showDetailsCall(String authorizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payments/authorizations/{authorization_id}"
            .replace("{" + "authorization_id" + "}", localVarApiClient.escapeString(authorizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(String authorizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationId' is set
        if (authorizationId == null) {
            throw new ApiException("Missing the required parameter 'authorizationId' when calling showDetails(Async)");
        }

        return showDetailsCall(authorizationId, _callback);

    }


    private ApiResponse<Authorization2> showDetailsWithHttpInfo(String authorizationId) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(authorizationId, null);
        Type localVarReturnType = new TypeToken<Authorization2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(String authorizationId, final ApiCallback<Authorization2> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(authorizationId, _callback);
        Type localVarReturnType = new TypeToken<Authorization2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final String authorizationId;

        private ShowDetailsRequestBuilder(String authorizationId) {
            this.authorizationId = authorizationId;
        }

        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(authorizationId, _callback);
        }


        /**
         * Execute showDetails request
         * @return Authorization2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Authorization2 execute() throws ApiException {
            ApiResponse<Authorization2> localVarResp = showDetailsWithHttpInfo(authorizationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;Authorization2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authorization2> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(authorizationId);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authorization2> _callback) throws ApiException {
            return showDetailsAsync(authorizationId, _callback);
        }
    }

    /**
     * Show details for authorized payment
     * Shows details for an authorized payment, by ID.
     * @param authorizationId The PayPal-generated ID for the authorized payment to void. (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(String authorizationId) throws IllegalArgumentException {
        if (authorizationId == null) throw new IllegalArgumentException("\"authorizationId\" is required but got null");
            

        return new ShowDetailsRequestBuilder(authorizationId);
    }
    private okhttp3.Call voidPaymentCall(String authorizationId, String payPalAuthAssertion, String prefer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payments/authorizations/{authorization_id}/void"
            .replace("{" + "authorization_id" + "}", localVarApiClient.escapeString(authorizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalAuthAssertion != null) {
            localVarHeaderParams.put("PayPal-Auth-Assertion", localVarApiClient.parameterToString(payPalAuthAssertion));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voidPaymentValidateBeforeCall(String authorizationId, String payPalAuthAssertion, String prefer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationId' is set
        if (authorizationId == null) {
            throw new ApiException("Missing the required parameter 'authorizationId' when calling voidPayment(Async)");
        }

        return voidPaymentCall(authorizationId, payPalAuthAssertion, prefer, _callback);

    }


    private ApiResponse<Authorization2> voidPaymentWithHttpInfo(String authorizationId, String payPalAuthAssertion, String prefer) throws ApiException {
        okhttp3.Call localVarCall = voidPaymentValidateBeforeCall(authorizationId, payPalAuthAssertion, prefer, null);
        Type localVarReturnType = new TypeToken<Authorization2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call voidPaymentAsync(String authorizationId, String payPalAuthAssertion, String prefer, final ApiCallback<Authorization2> _callback) throws ApiException {

        okhttp3.Call localVarCall = voidPaymentValidateBeforeCall(authorizationId, payPalAuthAssertion, prefer, _callback);
        Type localVarReturnType = new TypeToken<Authorization2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VoidPaymentRequestBuilder {
        private final String authorizationId;
        private String payPalAuthAssertion;
        private String prefer;

        private VoidPaymentRequestBuilder(String authorizationId) {
            this.authorizationId = authorizationId;
        }

        /**
         * Set payPalAuthAssertion
         * @param payPalAuthAssertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.&lt;/blockquote&gt; (optional)
         * @return VoidPaymentRequestBuilder
         */
        public VoidPaymentRequestBuilder payPalAuthAssertion(String payPalAuthAssertion) {
            this.payPalAuthAssertion = payPalAuthAssertion;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return VoidPaymentRequestBuilder
         */
        public VoidPaymentRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Build call for voidPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return&#x3D;representation. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &lt;code&gt;204 No Content&lt;/code&gt; status code with no JSON response body. This response is returned when the Prefer header is set to return&#x3D;minimal. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return voidPaymentCall(authorizationId, payPalAuthAssertion, prefer, _callback);
        }


        /**
         * Execute voidPayment request
         * @return Authorization2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return&#x3D;representation. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &lt;code&gt;204 No Content&lt;/code&gt; status code with no JSON response body. This response is returned when the Prefer header is set to return&#x3D;minimal. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Authorization2 execute() throws ApiException {
            ApiResponse<Authorization2> localVarResp = voidPaymentWithHttpInfo(authorizationId, payPalAuthAssertion, prefer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute voidPayment request with HTTP info returned
         * @return ApiResponse&lt;Authorization2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return&#x3D;representation. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &lt;code&gt;204 No Content&lt;/code&gt; status code with no JSON response body. This response is returned when the Prefer header is set to return&#x3D;minimal. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authorization2> executeWithHttpInfo() throws ApiException {
            return voidPaymentWithHttpInfo(authorizationId, payPalAuthAssertion, prefer);
        }

        /**
         * Execute voidPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return&#x3D;representation. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &lt;code&gt;204 No Content&lt;/code&gt; status code with no JSON response body. This response is returned when the Prefer header is set to return&#x3D;minimal. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authorization2> _callback) throws ApiException {
            return voidPaymentAsync(authorizationId, payPalAuthAssertion, prefer, _callback);
        }
    }

    /**
     * Void authorized payment
     * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.
     * @param authorizationId The PayPal-generated ID for the authorized payment to void. (required)
     * @return VoidPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &lt;code&gt;200 OK&lt;/code&gt; status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return&#x3D;representation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &lt;code&gt;204 No Content&lt;/code&gt; status code with no JSON response body. This response is returned when the Prefer header is set to return&#x3D;minimal. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The request failed because an internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public VoidPaymentRequestBuilder voidPayment(String authorizationId) throws IllegalArgumentException {
        if (authorizationId == null) throw new IllegalArgumentException("\"authorizationId\" is required but got null");
            

        return new VoidPaymentRequestBuilder(authorizationId);
    }
}
