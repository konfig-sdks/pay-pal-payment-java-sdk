/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DisbursementMode;
import com.konfigthis.client.model.PlatformFee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
 */
@ApiModel(description = "Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentInstruction {
  public static final String SERIALIZED_NAME_PLATFORM_FEES = "platform_fees";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FEES)
  private List<PlatformFee> platformFees = null;

  public static final String SERIALIZED_NAME_DISBURSEMENT_MODE = "disbursement_mode";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_MODE)
  private DisbursementMode disbursementMode = DisbursementMode.INSTANT;

  public static final String SERIALIZED_NAME_PAYEE_PRICING_TIER_ID = "payee_pricing_tier_id";
  @SerializedName(SERIALIZED_NAME_PAYEE_PRICING_TIER_ID)
  private String payeePricingTierId;

  public static final String SERIALIZED_NAME_PAYEE_RECEIVABLE_FX_RATE_ID = "payee_receivable_fx_rate_id";
  @SerializedName(SERIALIZED_NAME_PAYEE_RECEIVABLE_FX_RATE_ID)
  private String payeeReceivableFxRateId;

  public PaymentInstruction() {
  }

  public PaymentInstruction platformFees(List<PlatformFee> platformFees) {
    
    
    
    
    this.platformFees = platformFees;
    return this;
  }

  public PaymentInstruction addPlatformFeesItem(PlatformFee platformFeesItem) {
    if (this.platformFees == null) {
      this.platformFees = new ArrayList<>();
    }
    this.platformFees.add(platformFeesItem);
    return this;
  }

   /**
   * An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.
   * @return platformFees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.")

  public List<PlatformFee> getPlatformFees() {
    return platformFees;
  }


  public void setPlatformFees(List<PlatformFee> platformFees) {
    
    
    
    this.platformFees = platformFees;
  }


  public PaymentInstruction disbursementMode(DisbursementMode disbursementMode) {
    
    
    
    
    this.disbursementMode = disbursementMode;
    return this;
  }

   /**
   * Get disbursementMode
   * @return disbursementMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DisbursementMode getDisbursementMode() {
    return disbursementMode;
  }


  public void setDisbursementMode(DisbursementMode disbursementMode) {
    
    
    
    this.disbursementMode = disbursementMode;
  }


  public PaymentInstruction payeePricingTierId(String payeePricingTierId) {
    
    
    if (payeePricingTierId != null && payeePricingTierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for payeePricingTierId. Length must be greater than or equal to 1.");
    }
    
    this.payeePricingTierId = payeePricingTierId;
    return this;
  }

   /**
   * This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible &#39;payee_pricing_tier_id&#39; would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.
   * @return payeePricingTierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.")

  public String getPayeePricingTierId() {
    return payeePricingTierId;
  }


  public void setPayeePricingTierId(String payeePricingTierId) {
    
    
    if (payeePricingTierId != null && payeePricingTierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for payeePricingTierId. Length must be greater than or equal to 1.");
    }
    this.payeePricingTierId = payeePricingTierId;
  }


  public PaymentInstruction payeeReceivableFxRateId(String payeeReceivableFxRateId) {
    
    
    if (payeeReceivableFxRateId != null && payeeReceivableFxRateId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for payeeReceivableFxRateId. Length must be greater than or equal to 1.");
    }
    
    this.payeeReceivableFxRateId = payeeReceivableFxRateId;
    return this;
  }

   /**
   * FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.
   * @return payeeReceivableFxRateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.")

  public String getPayeeReceivableFxRateId() {
    return payeeReceivableFxRateId;
  }


  public void setPayeeReceivableFxRateId(String payeeReceivableFxRateId) {
    
    
    if (payeeReceivableFxRateId != null && payeeReceivableFxRateId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for payeeReceivableFxRateId. Length must be greater than or equal to 1.");
    }
    this.payeeReceivableFxRateId = payeeReceivableFxRateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentInstruction instance itself
   */
  public PaymentInstruction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInstruction paymentInstruction = (PaymentInstruction) o;
    return Objects.equals(this.platformFees, paymentInstruction.platformFees) &&
        Objects.equals(this.disbursementMode, paymentInstruction.disbursementMode) &&
        Objects.equals(this.payeePricingTierId, paymentInstruction.payeePricingTierId) &&
        Objects.equals(this.payeeReceivableFxRateId, paymentInstruction.payeeReceivableFxRateId)&&
        Objects.equals(this.additionalProperties, paymentInstruction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platformFees, disbursementMode, payeePricingTierId, payeeReceivableFxRateId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInstruction {\n");
    sb.append("    platformFees: ").append(toIndentedString(platformFees)).append("\n");
    sb.append("    disbursementMode: ").append(toIndentedString(disbursementMode)).append("\n");
    sb.append("    payeePricingTierId: ").append(toIndentedString(payeePricingTierId)).append("\n");
    sb.append("    payeeReceivableFxRateId: ").append(toIndentedString(payeeReceivableFxRateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("platform_fees");
    openapiFields.add("disbursement_mode");
    openapiFields.add("payee_pricing_tier_id");
    openapiFields.add("payee_receivable_fx_rate_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentInstruction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentInstruction is not found in the empty JSON string", PaymentInstruction.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("platform_fees") != null && !jsonObj.get("platform_fees").isJsonNull()) {
        JsonArray jsonArrayplatformFees = jsonObj.getAsJsonArray("platform_fees");
        if (jsonArrayplatformFees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platform_fees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platform_fees` to be an array in the JSON string but got `%s`", jsonObj.get("platform_fees").toString()));
          }

          // validate the optional field `platform_fees` (array)
          for (int i = 0; i < jsonArrayplatformFees.size(); i++) {
            PlatformFee.validateJsonObject(jsonArrayplatformFees.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("payee_pricing_tier_id") != null && !jsonObj.get("payee_pricing_tier_id").isJsonNull()) && !jsonObj.get("payee_pricing_tier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_pricing_tier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_pricing_tier_id").toString()));
      }
      if ((jsonObj.get("payee_receivable_fx_rate_id") != null && !jsonObj.get("payee_receivable_fx_rate_id").isJsonNull()) && !jsonObj.get("payee_receivable_fx_rate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_receivable_fx_rate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_receivable_fx_rate_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentInstruction>() {
           @Override
           public void write(JsonWriter out, PaymentInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentInstruction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentInstruction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentInstruction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentInstruction
  * @throws IOException if the JSON string is invalid with respect to PaymentInstruction
  */
  public static PaymentInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentInstruction.class);
  }

 /**
  * Convert an instance of PaymentInstruction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

