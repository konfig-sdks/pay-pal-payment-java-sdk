/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ExchangeRate;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PlatformFee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.
 */
@ApiModel(description = "The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SellerReceivableBreakdown {
  public static final String SERIALIZED_NAME_GROSS_AMOUNT = "gross_amount";
  @SerializedName(SERIALIZED_NAME_GROSS_AMOUNT)
  private Money grossAmount;

  public static final String SERIALIZED_NAME_PAYPAL_FEE = "paypal_fee";
  @SerializedName(SERIALIZED_NAME_PAYPAL_FEE)
  private Money paypalFee;

  public static final String SERIALIZED_NAME_PAYPAL_FEE_IN_RECEIVABLE_CURRENCY = "paypal_fee_in_receivable_currency";
  @SerializedName(SERIALIZED_NAME_PAYPAL_FEE_IN_RECEIVABLE_CURRENCY)
  private Money paypalFeeInReceivableCurrency;

  public static final String SERIALIZED_NAME_NET_AMOUNT = "net_amount";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNT)
  private Money netAmount;

  public static final String SERIALIZED_NAME_RECEIVABLE_AMOUNT = "receivable_amount";
  @SerializedName(SERIALIZED_NAME_RECEIVABLE_AMOUNT)
  private Money receivableAmount;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchange_rate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private ExchangeRate exchangeRate;

  public static final String SERIALIZED_NAME_PLATFORM_FEES = "platform_fees";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FEES)
  private List<PlatformFee> platformFees = null;

  public SellerReceivableBreakdown() {
  }

  public SellerReceivableBreakdown grossAmount(Money grossAmount) {
    
    
    
    
    this.grossAmount = grossAmount;
    return this;
  }

   /**
   * Get grossAmount
   * @return grossAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Money getGrossAmount() {
    return grossAmount;
  }


  public void setGrossAmount(Money grossAmount) {
    
    
    
    this.grossAmount = grossAmount;
  }


  public SellerReceivableBreakdown paypalFee(Money paypalFee) {
    
    
    
    
    this.paypalFee = paypalFee;
    return this;
  }

   /**
   * Get paypalFee
   * @return paypalFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getPaypalFee() {
    return paypalFee;
  }


  public void setPaypalFee(Money paypalFee) {
    
    
    
    this.paypalFee = paypalFee;
  }


  public SellerReceivableBreakdown paypalFeeInReceivableCurrency(Money paypalFeeInReceivableCurrency) {
    
    
    
    
    this.paypalFeeInReceivableCurrency = paypalFeeInReceivableCurrency;
    return this;
  }

   /**
   * Get paypalFeeInReceivableCurrency
   * @return paypalFeeInReceivableCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getPaypalFeeInReceivableCurrency() {
    return paypalFeeInReceivableCurrency;
  }


  public void setPaypalFeeInReceivableCurrency(Money paypalFeeInReceivableCurrency) {
    
    
    
    this.paypalFeeInReceivableCurrency = paypalFeeInReceivableCurrency;
  }


  public SellerReceivableBreakdown netAmount(Money netAmount) {
    
    
    
    
    this.netAmount = netAmount;
    return this;
  }

   /**
   * Get netAmount
   * @return netAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getNetAmount() {
    return netAmount;
  }


  public void setNetAmount(Money netAmount) {
    
    
    
    this.netAmount = netAmount;
  }


  public SellerReceivableBreakdown receivableAmount(Money receivableAmount) {
    
    
    
    
    this.receivableAmount = receivableAmount;
    return this;
  }

   /**
   * Get receivableAmount
   * @return receivableAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getReceivableAmount() {
    return receivableAmount;
  }


  public void setReceivableAmount(Money receivableAmount) {
    
    
    
    this.receivableAmount = receivableAmount;
  }


  public SellerReceivableBreakdown exchangeRate(ExchangeRate exchangeRate) {
    
    
    
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExchangeRate getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(ExchangeRate exchangeRate) {
    
    
    
    this.exchangeRate = exchangeRate;
  }


  public SellerReceivableBreakdown platformFees(List<PlatformFee> platformFees) {
    
    
    
    
    this.platformFees = platformFees;
    return this;
  }

  public SellerReceivableBreakdown addPlatformFeesItem(PlatformFee platformFeesItem) {
    if (this.platformFees == null) {
      this.platformFees = new ArrayList<>();
    }
    this.platformFees.add(platformFeesItem);
    return this;
  }

   /**
   * An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment.
   * @return platformFees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment.")

  public List<PlatformFee> getPlatformFees() {
    return platformFees;
  }


  public void setPlatformFees(List<PlatformFee> platformFees) {
    
    
    
    this.platformFees = platformFees;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SellerReceivableBreakdown instance itself
   */
  public SellerReceivableBreakdown putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellerReceivableBreakdown sellerReceivableBreakdown = (SellerReceivableBreakdown) o;
    return Objects.equals(this.grossAmount, sellerReceivableBreakdown.grossAmount) &&
        Objects.equals(this.paypalFee, sellerReceivableBreakdown.paypalFee) &&
        Objects.equals(this.paypalFeeInReceivableCurrency, sellerReceivableBreakdown.paypalFeeInReceivableCurrency) &&
        Objects.equals(this.netAmount, sellerReceivableBreakdown.netAmount) &&
        Objects.equals(this.receivableAmount, sellerReceivableBreakdown.receivableAmount) &&
        Objects.equals(this.exchangeRate, sellerReceivableBreakdown.exchangeRate) &&
        Objects.equals(this.platformFees, sellerReceivableBreakdown.platformFees)&&
        Objects.equals(this.additionalProperties, sellerReceivableBreakdown.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grossAmount, paypalFee, paypalFeeInReceivableCurrency, netAmount, receivableAmount, exchangeRate, platformFees, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellerReceivableBreakdown {\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    paypalFee: ").append(toIndentedString(paypalFee)).append("\n");
    sb.append("    paypalFeeInReceivableCurrency: ").append(toIndentedString(paypalFeeInReceivableCurrency)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    receivableAmount: ").append(toIndentedString(receivableAmount)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    platformFees: ").append(toIndentedString(platformFees)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gross_amount");
    openapiFields.add("paypal_fee");
    openapiFields.add("paypal_fee_in_receivable_currency");
    openapiFields.add("net_amount");
    openapiFields.add("receivable_amount");
    openapiFields.add("exchange_rate");
    openapiFields.add("platform_fees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gross_amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SellerReceivableBreakdown
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SellerReceivableBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellerReceivableBreakdown is not found in the empty JSON string", SellerReceivableBreakdown.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SellerReceivableBreakdown.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `gross_amount`
      Money.validateJsonObject(jsonObj.getAsJsonObject("gross_amount"));
      // validate the optional field `paypal_fee`
      if (jsonObj.get("paypal_fee") != null && !jsonObj.get("paypal_fee").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("paypal_fee"));
      }
      // validate the optional field `paypal_fee_in_receivable_currency`
      if (jsonObj.get("paypal_fee_in_receivable_currency") != null && !jsonObj.get("paypal_fee_in_receivable_currency").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("paypal_fee_in_receivable_currency"));
      }
      // validate the optional field `net_amount`
      if (jsonObj.get("net_amount") != null && !jsonObj.get("net_amount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("net_amount"));
      }
      // validate the optional field `receivable_amount`
      if (jsonObj.get("receivable_amount") != null && !jsonObj.get("receivable_amount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("receivable_amount"));
      }
      // validate the optional field `exchange_rate`
      if (jsonObj.get("exchange_rate") != null && !jsonObj.get("exchange_rate").isJsonNull()) {
        ExchangeRate.validateJsonObject(jsonObj.getAsJsonObject("exchange_rate"));
      }
      if (jsonObj.get("platform_fees") != null && !jsonObj.get("platform_fees").isJsonNull()) {
        JsonArray jsonArrayplatformFees = jsonObj.getAsJsonArray("platform_fees");
        if (jsonArrayplatformFees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platform_fees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platform_fees` to be an array in the JSON string but got `%s`", jsonObj.get("platform_fees").toString()));
          }

          // validate the optional field `platform_fees` (array)
          for (int i = 0; i < jsonArrayplatformFees.size(); i++) {
            PlatformFee.validateJsonObject(jsonArrayplatformFees.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellerReceivableBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellerReceivableBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellerReceivableBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellerReceivableBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<SellerReceivableBreakdown>() {
           @Override
           public void write(JsonWriter out, SellerReceivableBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SellerReceivableBreakdown read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SellerReceivableBreakdown instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SellerReceivableBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SellerReceivableBreakdown
  * @throws IOException if the JSON string is invalid with respect to SellerReceivableBreakdown
  */
  public static SellerReceivableBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellerReceivableBreakdown.class);
  }

 /**
  * Convert an instance of SellerReceivableBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

