/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PaymentInstruction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Captures either a portion or the full authorized amount of an authorized payment.
 */
@ApiModel(description = "Captures either a portion or the full authorized amount of an authorized payment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CaptureRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Object amount;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoice_id";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_FINAL_CAPTURE = "final_capture";
  @SerializedName(SERIALIZED_NAME_FINAL_CAPTURE)
  private Boolean finalCapture;

  public static final String SERIALIZED_NAME_NOTE_TO_PAYER = "note_to_payer";
  @SerializedName(SERIALIZED_NAME_NOTE_TO_PAYER)
  private String noteToPayer;

  public static final String SERIALIZED_NAME_SOFT_DESCRIPTOR = "soft_descriptor";
  @SerializedName(SERIALIZED_NAME_SOFT_DESCRIPTOR)
  private String softDescriptor;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUCTION = "payment_instruction";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUCTION)
  private PaymentInstruction paymentInstruction;

  public CaptureRequest() {
  }

  public CaptureRequest amount(Object amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public CaptureRequest putAmountItem(String key,  amountItem) {
    if (this.amount == null) {
      this.amount = ;
    }
    this.amount.put(key, amountItem);
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAmount() {
    return amount;
  }


  public void setAmount(Object amount) {
    
    
    
    this.amount = amount;
  }


  public CaptureRequest invoiceId(String invoiceId) {
    
    
    
    
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * Get invoiceId
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INVOICE-123", value = "")

  public String getInvoiceId() {
    return invoiceId;
  }


  public void setInvoiceId(String invoiceId) {
    
    
    
    this.invoiceId = invoiceId;
  }


  public CaptureRequest finalCapture(Boolean finalCapture) {
    
    
    
    
    this.finalCapture = finalCapture;
    return this;
  }

   /**
   * Get finalCapture
   * @return finalCapture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getFinalCapture() {
    return finalCapture;
  }


  public void setFinalCapture(Boolean finalCapture) {
    
    
    
    this.finalCapture = finalCapture;
  }


  public CaptureRequest noteToPayer(String noteToPayer) {
    
    
    
    
    this.noteToPayer = noteToPayer;
    return this;
  }

   /**
   * Get noteToPayer
   * @return noteToPayer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "If the ordered color is not available, we will substitute with a different color free of charge.", value = "")

  public String getNoteToPayer() {
    return noteToPayer;
  }


  public void setNoteToPayer(String noteToPayer) {
    
    
    
    this.noteToPayer = noteToPayer;
  }


  public CaptureRequest softDescriptor(String softDescriptor) {
    
    
    
    
    this.softDescriptor = softDescriptor;
    return this;
  }

   /**
   * Get softDescriptor
   * @return softDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bob's Custom Sweaters", value = "")

  public String getSoftDescriptor() {
    return softDescriptor;
  }


  public void setSoftDescriptor(String softDescriptor) {
    
    
    
    this.softDescriptor = softDescriptor;
  }


  public CaptureRequest paymentInstruction(PaymentInstruction paymentInstruction) {
    
    
    
    
    this.paymentInstruction = paymentInstruction;
    return this;
  }

   /**
   * Get paymentInstruction
   * @return paymentInstruction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentInstruction getPaymentInstruction() {
    return paymentInstruction;
  }


  public void setPaymentInstruction(PaymentInstruction paymentInstruction) {
    
    
    
    this.paymentInstruction = paymentInstruction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CaptureRequest instance itself
   */
  public CaptureRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaptureRequest captureRequest = (CaptureRequest) o;
    return Objects.equals(this.amount, captureRequest.amount) &&
        Objects.equals(this.invoiceId, captureRequest.invoiceId) &&
        Objects.equals(this.finalCapture, captureRequest.finalCapture) &&
        Objects.equals(this.noteToPayer, captureRequest.noteToPayer) &&
        Objects.equals(this.softDescriptor, captureRequest.softDescriptor) &&
        Objects.equals(this.paymentInstruction, captureRequest.paymentInstruction)&&
        Objects.equals(this.additionalProperties, captureRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, invoiceId, finalCapture, noteToPayer, softDescriptor, paymentInstruction, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaptureRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    finalCapture: ").append(toIndentedString(finalCapture)).append("\n");
    sb.append("    noteToPayer: ").append(toIndentedString(noteToPayer)).append("\n");
    sb.append("    softDescriptor: ").append(toIndentedString(softDescriptor)).append("\n");
    sb.append("    paymentInstruction: ").append(toIndentedString(paymentInstruction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invoice_id");
    openapiFields.add("note_to_payer");
    openapiFields.add("amount");
    openapiFields.add("final_capture");
    openapiFields.add("payment_instruction");
    openapiFields.add("soft_descriptor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CaptureRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CaptureRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaptureRequest is not found in the empty JSON string", CaptureRequest.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      }
      if ((jsonObj.get("invoice_id") != null && !jsonObj.get("invoice_id").isJsonNull()) && !jsonObj.get("invoice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_id").toString()));
      }
      if ((jsonObj.get("note_to_payer") != null && !jsonObj.get("note_to_payer").isJsonNull()) && !jsonObj.get("note_to_payer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_to_payer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_to_payer").toString()));
      }
      if ((jsonObj.get("soft_descriptor") != null && !jsonObj.get("soft_descriptor").isJsonNull()) && !jsonObj.get("soft_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soft_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soft_descriptor").toString()));
      }
      // validate the optional field `payment_instruction`
      if (jsonObj.get("payment_instruction") != null && !jsonObj.get("payment_instruction").isJsonNull()) {
        PaymentInstruction.validateJsonObject(jsonObj.getAsJsonObject("payment_instruction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaptureRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaptureRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaptureRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaptureRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CaptureRequest>() {
           @Override
           public void write(JsonWriter out, CaptureRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CaptureRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CaptureRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CaptureRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CaptureRequest
  * @throws IOException if the JSON string is invalid with respect to CaptureRequest
  */
  public static CaptureRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaptureRequest.class);
  }

 /**
  * Convert an instance of CaptureRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

