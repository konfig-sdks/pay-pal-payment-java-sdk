/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The processor response information for payment requests, such as direct credit card transactions.
 */
@ApiModel(description = "The processor response information for payment requests, such as direct credit card transactions.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProcessorResponse {
  /**
   * The address verification code for Visa, Discover, Mastercard, or American Express transactions.
   */
  @JsonAdapter(AvsCodeEnum.Adapter.class)
 public enum AvsCodeEnum {
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D"),
    
    E("E"),
    
    F("F"),
    
    G("G"),
    
    I("I"),
    
    M("M"),
    
    N("N"),
    
    P("P"),
    
    R("R"),
    
    S("S"),
    
    U("U"),
    
    W("W"),
    
    X("X"),
    
    Y("Y"),
    
    Z("Z"),
    
    NULL("Null"),
    
    _0("0"),
    
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4");

    private String value;

    AvsCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvsCodeEnum fromValue(String value) {
      for (AvsCodeEnum b : AvsCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvsCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvsCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvsCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvsCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AVS_CODE = "avs_code";
  @SerializedName(SERIALIZED_NAME_AVS_CODE)
  private AvsCodeEnum avsCode;

  /**
   * The card verification value code for for Visa, Discover, Mastercard, or American Express.
   */
  @JsonAdapter(CvvCodeEnum.Adapter.class)
 public enum CvvCodeEnum {
    E("E"),
    
    I("I"),
    
    M("M"),
    
    N("N"),
    
    P("P"),
    
    S("S"),
    
    U("U"),
    
    X("X"),
    
    ALL_OTHERS("All others"),
    
    _0("0"),
    
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4");

    private String value;

    CvvCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CvvCodeEnum fromValue(String value) {
      for (CvvCodeEnum b : CvvCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CvvCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CvvCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CvvCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CvvCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CVV_CODE = "cvv_code";
  @SerializedName(SERIALIZED_NAME_CVV_CODE)
  private CvvCodeEnum cvvCode;

  /**
   * Processor response code for the non-PayPal payment processor errors.
   */
  @JsonAdapter(ResponseCodeEnum.Adapter.class)
 public enum ResponseCodeEnum {
    _0000("0000"),
    
    _00N7("00N7"),
    
    _0100("0100"),
    
    _0390("0390"),
    
    _0500("0500"),
    
    _0580("0580"),
    
    _0800("0800"),
    
    _0880("0880"),
    
    _0890("0890"),
    
    _0960("0960"),
    
    _0R00("0R00"),
    
    _1000("1000"),
    
    _10BR("10BR"),
    
    _1300("1300"),
    
    _1310("1310"),
    
    _1312("1312"),
    
    _1317("1317"),
    
    _1320("1320"),
    
    _1330("1330"),
    
    _1335("1335"),
    
    _1340("1340"),
    
    _1350("1350"),
    
    _1352("1352"),
    
    _1360("1360"),
    
    _1370("1370"),
    
    _1380("1380"),
    
    _1382("1382"),
    
    _1384("1384"),
    
    _1390("1390"),
    
    _1393("1393"),
    
    _5100("5100"),
    
    _5110("5110"),
    
    _5120("5120"),
    
    _5130("5130"),
    
    _5135("5135"),
    
    _5140("5140"),
    
    _5150("5150"),
    
    _5160("5160"),
    
    _5170("5170"),
    
    _5180("5180"),
    
    _5190("5190"),
    
    _5200("5200"),
    
    _5210("5210"),
    
    _5400("5400"),
    
    _5500("5500"),
    
    _5650("5650"),
    
    _5700("5700"),
    
    _5710("5710"),
    
    _5800("5800"),
    
    _5900("5900"),
    
    _5910("5910"),
    
    _5920("5920"),
    
    _5930("5930"),
    
    _5950("5950"),
    
    _6300("6300"),
    
    _7600("7600"),
    
    _7700("7700"),
    
    _7710("7710"),
    
    _7800("7800"),
    
    _7900("7900"),
    
    _8000("8000"),
    
    _8010("8010"),
    
    _8020("8020"),
    
    _8030("8030"),
    
    _8100("8100"),
    
    _8110("8110"),
    
    _8220("8220"),
    
    _9100("9100"),
    
    _9500("9500"),
    
    _9510("9510"),
    
    _9520("9520"),
    
    _9530("9530"),
    
    _9540("9540"),
    
    _9600("9600"),
    
    PCNR("PCNR"),
    
    PCVV("PCVV"),
    
    PP06("PP06"),
    
    PPRN("PPRN"),
    
    PPAD("PPAD"),
    
    PPAB("PPAB"),
    
    PPAE("PPAE"),
    
    PPAG("PPAG"),
    
    PPAI("PPAI"),
    
    PPAR("PPAR"),
    
    PPAU("PPAU"),
    
    PPAV("PPAV"),
    
    PPAX("PPAX"),
    
    PPBG("PPBG"),
    
    PPC2("PPC2"),
    
    PPCE("PPCE"),
    
    PPCO("PPCO"),
    
    PPCR("PPCR"),
    
    PPCT("PPCT"),
    
    PPCU("PPCU"),
    
    PPD3("PPD3"),
    
    PPDC("PPDC"),
    
    PPDI("PPDI"),
    
    PPDV("PPDV"),
    
    PPDT("PPDT"),
    
    PPEF("PPEF"),
    
    PPEL("PPEL"),
    
    PPER("PPER"),
    
    PPEX("PPEX"),
    
    PPFE("PPFE"),
    
    PPFI("PPFI"),
    
    PPFR("PPFR"),
    
    PPFV("PPFV"),
    
    PPGR("PPGR"),
    
    PPH1("PPH1"),
    
    PPIF("PPIF"),
    
    PPII("PPII"),
    
    PPIM("PPIM"),
    
    PPIT("PPIT"),
    
    PPLR("PPLR"),
    
    PPLS("PPLS"),
    
    PPMB("PPMB"),
    
    PPMC("PPMC"),
    
    PPMD("PPMD"),
    
    PPNC("PPNC"),
    
    PPNL("PPNL"),
    
    PPNM("PPNM"),
    
    PPNT("PPNT"),
    
    PPPH("PPPH"),
    
    PPPI("PPPI"),
    
    PPPM("PPPM"),
    
    PPQC("PPQC"),
    
    PPRE("PPRE"),
    
    PPRF("PPRF"),
    
    PPRR("PPRR"),
    
    PPS0("PPS0"),
    
    PPS1("PPS1"),
    
    PPS2("PPS2"),
    
    PPS3("PPS3"),
    
    PPS4("PPS4"),
    
    PPS5("PPS5"),
    
    PPS6("PPS6"),
    
    PPSC("PPSC"),
    
    PPSD("PPSD"),
    
    PPSE("PPSE"),
    
    PPTE("PPTE"),
    
    PPTF("PPTF"),
    
    PPTI("PPTI"),
    
    PPTR("PPTR"),
    
    PPTT("PPTT"),
    
    PPTV("PPTV"),
    
    PPUA("PPUA"),
    
    PPUC("PPUC"),
    
    PPUE("PPUE"),
    
    PPUI("PPUI"),
    
    PPUP("PPUP"),
    
    PPUR("PPUR"),
    
    PPVC("PPVC"),
    
    PPVE("PPVE"),
    
    PPVT("PPVT");

    private String value;

    ResponseCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseCodeEnum fromValue(String value) {
      for (ResponseCodeEnum b : ResponseCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "response_code";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private ResponseCodeEnum responseCode;

  /**
   * The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
   */
  @JsonAdapter(PaymentAdviceCodeEnum.Adapter.class)
 public enum PaymentAdviceCodeEnum {
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _21("21");

    private String value;

    PaymentAdviceCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentAdviceCodeEnum fromValue(String value) {
      for (PaymentAdviceCodeEnum b : PaymentAdviceCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentAdviceCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentAdviceCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentAdviceCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentAdviceCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_ADVICE_CODE = "payment_advice_code";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ADVICE_CODE)
  private PaymentAdviceCodeEnum paymentAdviceCode;

  public ProcessorResponse() {
  }

  
  public ProcessorResponse(
     AvsCodeEnum avsCode, 
     CvvCodeEnum cvvCode, 
     ResponseCodeEnum responseCode, 
     PaymentAdviceCodeEnum paymentAdviceCode
  ) {
    this();
    this.avsCode = avsCode;
    this.cvvCode = cvvCode;
    this.responseCode = responseCode;
    this.paymentAdviceCode = paymentAdviceCode;
  }

   /**
   * The address verification code for Visa, Discover, Mastercard, or American Express transactions.
   * @return avsCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The address verification code for Visa, Discover, Mastercard, or American Express transactions.")

  public AvsCodeEnum getAvsCode() {
    return avsCode;
  }




   /**
   * The card verification value code for for Visa, Discover, Mastercard, or American Express.
   * @return cvvCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The card verification value code for for Visa, Discover, Mastercard, or American Express.")

  public CvvCodeEnum getCvvCode() {
    return cvvCode;
  }




   /**
   * Processor response code for the non-PayPal payment processor errors.
   * @return responseCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Processor response code for the non-PayPal payment processor errors.")

  public ResponseCodeEnum getResponseCode() {
    return responseCode;
  }




   /**
   * The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
   * @return paymentAdviceCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.")

  public PaymentAdviceCodeEnum getPaymentAdviceCode() {
    return paymentAdviceCode;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProcessorResponse instance itself
   */
  public ProcessorResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessorResponse processorResponse = (ProcessorResponse) o;
    return Objects.equals(this.avsCode, processorResponse.avsCode) &&
        Objects.equals(this.cvvCode, processorResponse.cvvCode) &&
        Objects.equals(this.responseCode, processorResponse.responseCode) &&
        Objects.equals(this.paymentAdviceCode, processorResponse.paymentAdviceCode)&&
        Objects.equals(this.additionalProperties, processorResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avsCode, cvvCode, responseCode, paymentAdviceCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessorResponse {\n");
    sb.append("    avsCode: ").append(toIndentedString(avsCode)).append("\n");
    sb.append("    cvvCode: ").append(toIndentedString(cvvCode)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    paymentAdviceCode: ").append(toIndentedString(paymentAdviceCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avs_code");
    openapiFields.add("cvv_code");
    openapiFields.add("response_code");
    openapiFields.add("payment_advice_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProcessorResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProcessorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessorResponse is not found in the empty JSON string", ProcessorResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("avs_code") != null && !jsonObj.get("avs_code").isJsonNull()) && !jsonObj.get("avs_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_code").toString()));
      }
      if ((jsonObj.get("cvv_code") != null && !jsonObj.get("cvv_code").isJsonNull()) && !jsonObj.get("cvv_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvv_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvv_code").toString()));
      }
      if ((jsonObj.get("response_code") != null && !jsonObj.get("response_code").isJsonNull()) && !jsonObj.get("response_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_code").toString()));
      }
      if ((jsonObj.get("payment_advice_code") != null && !jsonObj.get("payment_advice_code").isJsonNull()) && !jsonObj.get("payment_advice_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_advice_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_advice_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessorResponse>() {
           @Override
           public void write(JsonWriter out, ProcessorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessorResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProcessorResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProcessorResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProcessorResponse
  * @throws IOException if the JSON string is invalid with respect to ProcessorResponse
  */
  public static ProcessorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessorResponse.class);
  }

 /**
  * Convert an instance of ProcessorResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

