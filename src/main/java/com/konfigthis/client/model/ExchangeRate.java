/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The exchange rate that determines the amount to convert from one currency to another currency.
 */
@ApiModel(description = "The exchange rate that determines the amount to convert from one currency to another currency.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExchangeRate {
  public static final String SERIALIZED_NAME_SOURCE_CURRENCY = "source_currency";
  @SerializedName(SERIALIZED_NAME_SOURCE_CURRENCY)
  private String sourceCurrency;

  public static final String SERIALIZED_NAME_TARGET_CURRENCY = "target_currency";
  @SerializedName(SERIALIZED_NAME_TARGET_CURRENCY)
  private String targetCurrency;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ExchangeRate() {
  }

  public ExchangeRate sourceCurrency(String sourceCurrency) {
    
    
    if (sourceCurrency != null && sourceCurrency.length() < 3) {
      throw new IllegalArgumentException("Invalid value for sourceCurrency. Length must be greater than or equal to 3.");
    }
    
    this.sourceCurrency = sourceCurrency;
    return this;
  }

   /**
   * The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency.
   * @return sourceCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency.")

  public String getSourceCurrency() {
    return sourceCurrency;
  }


  public void setSourceCurrency(String sourceCurrency) {
    
    
    if (sourceCurrency != null && sourceCurrency.length() < 3) {
      throw new IllegalArgumentException("Invalid value for sourceCurrency. Length must be greater than or equal to 3.");
    }
    this.sourceCurrency = sourceCurrency;
  }


  public ExchangeRate targetCurrency(String targetCurrency) {
    
    
    if (targetCurrency != null && targetCurrency.length() < 3) {
      throw new IllegalArgumentException("Invalid value for targetCurrency. Length must be greater than or equal to 3.");
    }
    
    this.targetCurrency = targetCurrency;
    return this;
  }

   /**
   * The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency.
   * @return targetCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency.")

  public String getTargetCurrency() {
    return targetCurrency;
  }


  public void setTargetCurrency(String targetCurrency) {
    
    
    if (targetCurrency != null && targetCurrency.length() < 3) {
      throw new IllegalArgumentException("Invalid value for targetCurrency. Length must be greater than or equal to 3.");
    }
    this.targetCurrency = targetCurrency;
  }


  public ExchangeRate value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point.")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExchangeRate instance itself
   */
  public ExchangeRate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeRate exchangeRate = (ExchangeRate) o;
    return Objects.equals(this.sourceCurrency, exchangeRate.sourceCurrency) &&
        Objects.equals(this.targetCurrency, exchangeRate.targetCurrency) &&
        Objects.equals(this.value, exchangeRate.value)&&
        Objects.equals(this.additionalProperties, exchangeRate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceCurrency, targetCurrency, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeRate {\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    targetCurrency: ").append(toIndentedString(targetCurrency)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("source_currency");
    openapiFields.add("target_currency");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExchangeRate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExchangeRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangeRate is not found in the empty JSON string", ExchangeRate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("source_currency") != null && !jsonObj.get("source_currency").isJsonNull()) && !jsonObj.get("source_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_currency").toString()));
      }
      if ((jsonObj.get("target_currency") != null && !jsonObj.get("target_currency").isJsonNull()) && !jsonObj.get("target_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_currency").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangeRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangeRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangeRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangeRate.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangeRate>() {
           @Override
           public void write(JsonWriter out, ExchangeRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangeRate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExchangeRate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExchangeRate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExchangeRate
  * @throws IOException if the JSON string is invalid with respect to ExchangeRate
  */
  public static ExchangeRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangeRate.class);
  }

 /**
  * Convert an instance of ExchangeRate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

