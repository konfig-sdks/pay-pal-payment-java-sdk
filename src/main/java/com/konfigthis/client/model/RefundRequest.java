/*
 * Payments
 * Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PaymentInstruction2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Refunds a captured payment, by ID. For a full refund, include an empty request body. For a partial refund, include an &lt;code&gt;amount&lt;/code&gt; object in the request body.
 */
@ApiModel(description = "Refunds a captured payment, by ID. For a full refund, include an empty request body. For a partial refund, include an <code>amount</code> object in the request body.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RefundRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Money amount;

  public static final String SERIALIZED_NAME_CUSTOM_ID = "custom_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoice_id";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_NOTE_TO_PAYER = "note_to_payer";
  @SerializedName(SERIALIZED_NAME_NOTE_TO_PAYER)
  private String noteToPayer;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUCTION = "payment_instruction";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUCTION)
  private PaymentInstruction2 paymentInstruction;

  public RefundRequest() {
  }

  public RefundRequest amount(Money amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getAmount() {
    return amount;
  }


  public void setAmount(Money amount) {
    
    
    
    this.amount = amount;
  }


  public RefundRequest customId(String customId) {
    
    
    if (customId != null && customId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for customId. Length must be greater than or equal to 1.");
    }
    
    this.customId = customId;
    return this;
  }

   /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode.
   * @return customId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode.")

  public String getCustomId() {
    return customId;
  }


  public void setCustomId(String customId) {
    
    
    if (customId != null && customId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for customId. Length must be greater than or equal to 1.");
    }
    this.customId = customId;
  }


  public RefundRequest invoiceId(String invoiceId) {
    
    
    if (invoiceId != null && invoiceId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for invoiceId. Length must be greater than or equal to 1.");
    }
    
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode.
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode.")

  public String getInvoiceId() {
    return invoiceId;
  }


  public void setInvoiceId(String invoiceId) {
    
    
    if (invoiceId != null && invoiceId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for invoiceId. Length must be greater than or equal to 1.");
    }
    this.invoiceId = invoiceId;
  }


  public RefundRequest noteToPayer(String noteToPayer) {
    
    
    if (noteToPayer != null && noteToPayer.length() < 1) {
      throw new IllegalArgumentException("Invalid value for noteToPayer. Length must be greater than or equal to 1.");
    }
    
    this.noteToPayer = noteToPayer;
    return this;
  }

   /**
   * The reason for the refund. Appears in both the payer&#39;s transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode.
   * @return noteToPayer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode.")

  public String getNoteToPayer() {
    return noteToPayer;
  }


  public void setNoteToPayer(String noteToPayer) {
    
    
    if (noteToPayer != null && noteToPayer.length() < 1) {
      throw new IllegalArgumentException("Invalid value for noteToPayer. Length must be greater than or equal to 1.");
    }
    this.noteToPayer = noteToPayer;
  }


  public RefundRequest paymentInstruction(PaymentInstruction2 paymentInstruction) {
    
    
    
    
    this.paymentInstruction = paymentInstruction;
    return this;
  }

   /**
   * Get paymentInstruction
   * @return paymentInstruction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentInstruction2 getPaymentInstruction() {
    return paymentInstruction;
  }


  public void setPaymentInstruction(PaymentInstruction2 paymentInstruction) {
    
    
    
    this.paymentInstruction = paymentInstruction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RefundRequest instance itself
   */
  public RefundRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundRequest refundRequest = (RefundRequest) o;
    return Objects.equals(this.amount, refundRequest.amount) &&
        Objects.equals(this.customId, refundRequest.customId) &&
        Objects.equals(this.invoiceId, refundRequest.invoiceId) &&
        Objects.equals(this.noteToPayer, refundRequest.noteToPayer) &&
        Objects.equals(this.paymentInstruction, refundRequest.paymentInstruction)&&
        Objects.equals(this.additionalProperties, refundRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, customId, invoiceId, noteToPayer, paymentInstruction, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    noteToPayer: ").append(toIndentedString(noteToPayer)).append("\n");
    sb.append("    paymentInstruction: ").append(toIndentedString(paymentInstruction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("custom_id");
    openapiFields.add("invoice_id");
    openapiFields.add("note_to_payer");
    openapiFields.add("payment_instruction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RefundRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RefundRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundRequest is not found in the empty JSON string", RefundRequest.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      }
      if ((jsonObj.get("custom_id") != null && !jsonObj.get("custom_id").isJsonNull()) && !jsonObj.get("custom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_id").toString()));
      }
      if ((jsonObj.get("invoice_id") != null && !jsonObj.get("invoice_id").isJsonNull()) && !jsonObj.get("invoice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_id").toString()));
      }
      if ((jsonObj.get("note_to_payer") != null && !jsonObj.get("note_to_payer").isJsonNull()) && !jsonObj.get("note_to_payer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_to_payer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_to_payer").toString()));
      }
      // validate the optional field `payment_instruction`
      if (jsonObj.get("payment_instruction") != null && !jsonObj.get("payment_instruction").isJsonNull()) {
        PaymentInstruction2.validateJsonObject(jsonObj.getAsJsonObject("payment_instruction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundRequest>() {
           @Override
           public void write(JsonWriter out, RefundRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RefundRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RefundRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RefundRequest
  * @throws IOException if the JSON string is invalid with respect to RefundRequest
  */
  public static RefundRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundRequest.class);
  }

 /**
  * Convert an instance of RefundRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

